{
  "metadata":{
    "name":"Welcome",
    "user_save_timestamp":"2014-09-06T17:54:29.799Z",
    "auto_save_timestamp":"2014-09-06T18:31:22.569Z"
  },
  "worksheets":[{
    "cells":[{
      "cell_type":"markdown",
      "source":"## Welcome to Scala Notebook\n\nScala notebook is an interactive REPL. You type scala expressions in the browser, and they are evaluated in a Kernel behind the scenes. Cells can contain formatting or code."
    },{
      "cell_type":"markdown",
      "source":"To edit a markdown cell, double-click in the text. "
    },{
      "cell_type":"code",
      "input":"// Simple expressions\nList(1,2,3).reverse // show\n ",
      "language":"scala",
      "collapsed":false,
      "prompt_number":2,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"sparkContext",
      "language":"scala",
      "collapsed":false,
      "prompt_number":3,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"val file = sparkContext.textFile(\"hdfs://ec2-54-77-215-229.eu-west-1.compute.amazonaws.com:9000/data/yum.log\")",
      "language":"scala",
      "collapsed":false,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"val rdd = sparkContext.makeRDD(Array(1, 2))",
      "language":"scala",
      "collapsed":false,
      "prompt_number":4,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"rdd.count()\n ",
      "language":"scala",
      "collapsed":false,
      "prompt_number":5,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"case class A(a:String)\nval a:A  = A(\"ok\")",
      "language":"scala",
      "collapsed":false,
      "prompt_number":6,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"val signs = sparkContext.makeRDD(Array(\">\", \"<\"))\nval appendedSigns = signs.map(_ + a.a)\n\n  <div>{appendedSigns.collect() map (s => <p>{s}</p>)}</div>\n  ",
      "language":"scala",
      "collapsed":false,
      "prompt_number":11,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"// Reactive components allow dynamic communication to Scala and Javascript\nval ib = new InputBox(\"\")",
      "language":"scala",
      "collapsed":false,
      "prompt_number":1,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"val ib2 = new InputBox(\"\")",
      "language":"scala",
      "collapsed":false,
      "prompt_number":2,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"// After running this, type text in the second box and it appears in the first\nib.currentValue <-- ib2.currentValue",
      "language":"scala",
      "collapsed":false,
      "prompt_number":5,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"",
      "language":"scala",
      "collapsed":true,
      "outputs":[]
    }]
  }],
  "autosaved":[{
    "cells":[{
      "cell_type":"markdown",
      "source":"## Welcome to Scala Notebook\n\nScala notebook is an interactive REPL. You type scala expressions in the browser, and they are evaluated in a Kernel behind the scenes. Cells can contain formatting or code."
    },{
      "cell_type":"markdown",
      "source":"To edit a markdown cell, double-click in the text. "
    },{
      "cell_type":"code",
      "input":"// Simple expressions\nList(1,2,3).reverse // show\n ",
      "language":"scala",
      "collapsed":false,
      "prompt_number":2,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"sparkContext.getConf.toDebugString\n ",
      "language":"scala",
      "collapsed":false,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"val file = sparkContext.textFile(\"hdfs://localhost:19000/data/yum.log\")\n  val words = file flatMap { _.split(\" \") }\nwords.count()",
      "language":"scala",
      "collapsed":false,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"",
      "language":"scala",
      "collapsed":false,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"rdd.count()\n ",
      "language":"scala",
      "collapsed":false,
      "prompt_number":5,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"case class A(a:String)\nval a:A  = A(\"ok\")",
      "language":"scala",
      "collapsed":false,
      "prompt_number":6,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"val signs = sparkContext.makeRDD(Array(\">\", \"<\"))\nval appendedSigns = signs.map(_ + a.a)\n\n  <div>{appendedSigns.collect() map (s => <p>{s}</p>)}</div>\n  ",
      "language":"scala",
      "collapsed":false,
      "prompt_number":11,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"// Reactive components allow dynamic communication to Scala and Javascript\nval ib = new InputBox(\"\")",
      "language":"scala",
      "collapsed":false,
      "prompt_number":1,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"val ib2 = new InputBox(\"\")",
      "language":"scala",
      "collapsed":false,
      "prompt_number":2,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"// After running this, type text in the second box and it appears in the first\nib.currentValue <-- ib2.currentValue",
      "language":"scala",
      "collapsed":false,
      "prompt_number":5,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"",
      "language":"scala",
      "collapsed":true,
      "outputs":[]
    }]
  }],
  "nbformat":3
}