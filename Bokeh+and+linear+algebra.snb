{
  "metadata":{
    "name":"Bokeh and linear algebra",
    "user_save_timestamp":"2014-11-15T16:02:08.385Z",
    "auto_save_timestamp":"2014-11-15T16:02:48.098Z"
  },
  "worksheets":[{
    "cells":[{
      "cell_type":"code",
      "input":"import io.continuum.bokeh._\nimport breeze.linalg.linspace\nimport notebook.front.third.Bokeh",
      "language":"scala",
      "collapsed":false,
      "prompt_number":1,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"// Simple scatter plot example.\n// We build a grid of points in the unit square.\nval unit_interval = linspace(0,1,11)\nunit_interval.sum / unit_interval.size \nval unit_square = for (x <- unit_interval.data; y <- unit_interval.data) yield (x,y)\nunit_square.size\nBokeh.scatterPlot(unit_square.map({case (x,y) => Bokeh.ScatterPoint(x,y)}))",
      "language":"scala",
      "collapsed":false,
      "prompt_number":2,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"\nimport math.{Pi=>pi}\n\n// Generate some data, in = [-2pi,2pi], out = sin(in)\nval xss = List(0.2,0.1,0.05,0.02).map(resolution => -2*pi to 2*pi by resolution)\nval f = Math.sin _\n\nval graphs = for (xs <- xss)\n  yield Bokeh.functionGraph(xs, f)\n  \nBokeh.plot(graphs)",
      "language":"scala",
      "collapsed":false,
      "prompt_number":5,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"\n  \n  ",
      "language":"scala",
      "collapsed":false,
      "prompt_number":7,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"",
      "language":"scala",
      "collapsed":false,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"",
      "language":"scala",
      "collapsed":false,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"",
      "language":"scala",
      "collapsed":false,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"",
      "language":"scala",
      "collapsed":false,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"",
      "language":"scala",
      "collapsed":false,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"",
      "language":"scala",
      "collapsed":false,
      "outputs":[]
    }]
  }],
  "autosaved":[{
    "cells":[{
      "cell_type":"code",
      "input":"import io.continuum.bokeh._\nimport breeze.linalg.linspace\nimport notebook.front.third.Bokeh",
      "language":"scala",
      "collapsed":false,
      "prompt_number":1,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"// Simple scatter plot example.\n// We build a grid of points in the unit square.\nval unit_interval = linspace(0,1,11)\nunit_interval.sum / unit_interval.size \nval unit_square = for (x <- unit_interval.data; y <- unit_interval.data) yield (x,y)\nunit_square.size\nBokeh.scatterPlot(unit_square.map({case (x,y) => Bokeh.ScatterPoint(x,y)}))",
      "language":"scala",
      "collapsed":false,
      "prompt_number":2,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"\nimport math.{Pi=>pi}\n\n// Generate some data, in = [-2pi,2pi], out = sin(in)\nval xss = List(0.2,0.05,0.02,0.01).map(resolution => -2*pi to 2*pi by resolution)\nval f = Math.sin _\n\nval graphs = for (xs <- xss)\n  yield Bokeh.functionGraph(xs, f)\n  \nBokeh.plot(graphs)",
      "language":"scala",
      "collapsed":false,
      "prompt_number":7,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"\n  \n  ",
      "language":"scala",
      "collapsed":false,
      "prompt_number":7,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"",
      "language":"scala",
      "collapsed":false,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"",
      "language":"scala",
      "collapsed":false,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"",
      "language":"scala",
      "collapsed":false,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"",
      "language":"scala",
      "collapsed":false,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"",
      "language":"scala",
      "collapsed":false,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"",
      "language":"scala",
      "collapsed":false,
      "outputs":[]
    }]
  }],
  "nbformat":3
}